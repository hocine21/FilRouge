<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ asset('css/appro.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <title>Page d'Accueil</title>
</head>
<body>
    <header>
        <div class="container">
            <h1>COUP'ACIER</h1>
        </div>
    </header>
    <div class="container-block">
        <div class="block-text">
            <h1>Bienvenue sur la page ADMINISTRATEUR, vous pouvez vous connecter et serez redirigé vers votre plateforme :</h1>
            <div class="button">
                <a id="btnAjoutFournisseur"><button class="ajout">Ajout Fournisseur</button></a>
            </div>
        </div>
        <!-- Formulaire pour ajouter un fournisseur -->
        <div id="ajoutFournisseur" style="visibility: hidden;">
            <form id="addSupplierForm">
                <h2 id="formTitle">Ajouter un Fournisseur</h2>
                <input type="text" id="supplierName" name="nomFournisseur" placeholder="Nom du fournisseur" required>
                <input type="text" id="supplierType" name="typeFourniture" placeholder="Type de fourniture" required>
                <input type="number" id="supplierPrice" name="prixHTFournisseur" placeholder="Prix HT" required>
                <input type="hidden" id="supplierId" name="supplierId">
                <button type="submit" class="button-71" role="button">Ajouter Fournisseur</button>
                <button type="button" id="btnAnnuler" style="display: none;">Annuler</button>
            </form>
        </div>
        <!-- Tableau pour afficher les fournisseurs -->
        <div id="tableauFournisseurs">
            <h2>Liste des Fournisseurs</h2>
            <table id="supplierTable">
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Type</th>
                        <th>Prix HT</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="supplierTableBody">
                    <!-- Les fournisseurs seront ajoutés ici dynamiquement -->
                </tbody>
            </table>
        </div>
    </div>
    <footer>
        <p>Ceci est le pied de page.</p>
    </footer>
    <script>
           document.addEventListener('DOMContentLoaded', function() {
    const formAjoutFournisseur = document.getElementById('addSupplierForm');
    const btnAjoutFournisseur = document.getElementById('btnAjoutFournisseur');
    const tableFournisseurs = document.getElementById('supplierTableBody');

// Vérification que tableFournisseurs existe avant de l'utiliser
if (!tableFournisseurs) {
    console.error('Erreur : élément avec ID supplierTableBody non trouvé');
    return; // Arrêter l'exécution si l'élément n'est pas trouvé
}

// Fonction pour récupérer et afficher les fournisseurs depuis l'API
function fetchAndDisplaySuppliers() {
    fetch('/api/fournisseurs')
        .then(response => response.json())
        .then(data => {
            // Effacer le contenu actuel du tableau
            tableFournisseurs.innerHTML = '';

            // Boucler à travers les données des fournisseurs et les afficher dans le tableau
            data.forEach(fournisseur => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${fournisseur.nomFournisseur}</td>
                    <td>${fournisseur.typeFourniture}</td>
                    <td>${fournisseur.prixHTFournisseur}</td>
                    <td>
                        <button class="btnModifier" data-id="${fournisseur.id}">Modifier</button>
                        <button class="btnSupprimer" data-id="${fournisseur.id}">Supprimer</button>
                    </td>
                `;
                tableFournisseurs.appendChild(tr);
            });
        })
        .catch(error => console.error('Erreur lors de la récupération des fournisseurs :', error));
}

// Gérer l'événement de soumission du formulaire d'ajout/modification de fournisseur
formAjoutFournisseur.addEventListener('submit', function(event) {
    event.preventDefault();

    const formData = {
        nomFournisseur: document.getElementById('supplierName').value,
        typeFourniture: document.getElementById('supplierType').value,
        prixHTFournisseur: parseFloat(document.getElementById('supplierPrice').value)
    };

    // Envoyer les données à l'API pour l'ajout ou la modification d'un fournisseur
    let apiUrl = '/api/fournisseurs/nouveau';
    let method = 'POST';

    // Vérifier si le formulaire est utilisé pour la modification
    if (formAjoutFournisseur.getAttribute('data-mode') === 'edit') {
        const fournisseurId = formAjoutFournisseur.getAttribute('data-id');
        apiUrl = `/api/fournisseurs/${fournisseurId}/modifier`;
        method = 'PUT';
    }

    fetch(apiUrl, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (method === 'POST') {
                alert('Fournisseur ajouté avec succès');
            } else {
                alert('Fournisseur modifié avec succès');
                formAjoutFournisseur.removeAttribute('data-mode'); // Réinitialiser le mode du formulaire
                formAjoutFournisseur.removeAttribute('data-id'); // Réinitialiser l'ID du fournisseur en mode édition
            }
            formAjoutFournisseur.reset(); // Réinitialiser le formulaire après l'ajout/modification
            fetchAndDisplaySuppliers(); // Rafraîchir la liste des fournisseurs
        })
        .catch(error => console.error('Erreur lors de l\'ajout/modification du fournisseur :', error));
});

// Gérer le clic sur le bouton "Ajout Fournisseur" pour afficher/cacher le formulaire
btnAjoutFournisseur.addEventListener('click', function() {
    const ajoutFournisseur = document.getElementById('ajoutFournisseur');
    if (ajoutFournisseur.style.visibility === 'hidden') {
        ajoutFournisseur.style.visibility = 'visible';
        fetchAndDisplaySuppliers(); // Afficher les fournisseurs lors de l'affichage du formulaire
    } else {
        ajoutFournisseur.style.visibility = 'hidden';
    }
});

// Gérer le clic sur les boutons de modification et de suppression dans le tableau
tableFournisseurs.addEventListener('click', function(event) {
    const target = event.target;
    if (target.classList.contains('btnModifier')) {
        // Récupérer l'ID du fournisseur à modifier
        const fournisseurId = target.getAttribute('data-id');
        // Pré-remplir le formulaire avec les données du fournisseur à modifier
        fetch(`/api/fournisseurs/${fournisseurId}`)
            .then(response => response.json())
            .then(data => {
                // Remplir le formulaire avec les données du fournisseur récupéré
                document.getElementById('supplierName').value = data.nomFournisseur;
                document.getElementById('supplierType').value = data.typeFourniture;
                document.getElementById('supplierPrice').value = data.prixHTFournisseur;
                // Définir l'attribut data-mode="edit" et data-id pour indiquer le mode de modification
                formAjoutFournisseur.setAttribute('data-mode', 'edit');
                formAjoutFournisseur.setAttribute('data-id', fournisseurId);
                // Faire défiler vers le formulaire d'ajout/modification
                const ajoutFournisseur = document.getElementById('ajoutFournisseur');
                ajoutFournisseur.style.visibility = 'visible';
                ajoutFournisseur.scrollIntoView({ behavior: 'smooth' });
            })
            .catch(error => console.error('Erreur lors de la récupération du fournisseur pour modification :', error));
    } else if (target.classList.contains('btnSupprimer')) {
        // Récupérer l'ID du fournisseur à supprimer
        const fournisseurId = target.getAttribute('data-id');
        // Implémenter la logique de suppression ici
        if (confirm('Voulez-vous vraiment supprimer ce fournisseur ?')) {
            fetch(`/api/fournisseurs/${fournisseurId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    alert('Fournisseur supprimé avec succès');
                    fetchAndDisplaySuppliers(); // Rafraîchir la liste des fournisseurs après suppression
                })
                .catch(error => console.error('Erreur lors de la suppression du fournisseur :', error));
        }
    }
});

// Appeler cette fonction au chargement initial pour afficher les fournisseurs existants
fetchAndDisplaySuppliers();
});
    </script>
</body>
</html>
